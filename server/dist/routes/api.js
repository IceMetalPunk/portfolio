import { config } from 'dotenv';
import { Router } from 'express';
import { Pool } from 'pg';
config();
export const APIRouter = Router();
const connectionString = `postgresql://${process.env.SUPABASE_UN}:${process.env.SUPABASE_PW}@${process.env.SUPABASE_DOMAIN}:${process.env.SUPABASE_PORT}/${process.env.SUPABASE_DB}`;
const pool = new Pool({ connectionString });
async function* getYouTubeResults(url, params) {
    const query = new URLSearchParams(params);
    query.set('channelId', process.env.YT_CHANNEL_ID);
    query.set('key', process.env.YT_API_KEY);
    while (true) {
        const response = await fetch(url + '?' + query.toString());
        const json = (await response.json());
        if (json.items) {
            for (let item of json.items) {
                yield item;
            }
        }
        if (json.nextPageToken) {
            query.set('pageToken', json.nextPageToken);
        }
        else {
            return;
        }
    }
}
const getBestThumbnail = (thumbnails) => {
    const descendingQualityOrder = [
        'maxres',
        'high',
        'default',
        'medium',
        'standard',
    ];
    for (let quality of descendingQualityOrder) {
        if (thumbnails.hasOwnProperty(quality)) {
            return thumbnails[quality];
        }
    }
    return null;
};
const updateVideoCache = async (videos) => {
    let resultingCount = 0;
    for await (let video of videos) {
        ++resultingCount;
        const id = video.id.videoId;
        const title = video.snippet.title;
        const description = video.snippet.description;
        const thumbnail = getBestThumbnail(video.snippet.thumbnails);
        const thumbnailUrl = thumbnail?.url ?? '';
        const etag = video.etag;
        const publishedTime = video.snippet.publishTime;
        await pool.query('INSERT INTO synthia_videos (id, title, description, thumbnail_url, published_at, etag) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (id) DO NOTHING', [id, title, description, thumbnailUrl, publishedTime, etag]);
    }
    await pool.query('UPDATE metadata SET last_video_check=$1 WHERE id=$2', [
        new Date(),
        1,
    ]);
    return resultingCount;
};
APIRouter.get('/getLatestVideos', async (_, res) => {
    const url = 'https://www.googleapis.com/youtube/v3/search';
    const params = {
        part: 'snippet',
        maxResults: '50',
        order: 'date',
        q: 'Synthia',
        type: 'video',
    };
    const lastCheckResult = await pool.query('SELECT * FROM metadata');
    if (lastCheckResult &&
        lastCheckResult.rowCount &&
        lastCheckResult.rowCount > 0) {
        const lastCheck = lastCheckResult.rows[0].last_video_check;
        params.publishedAfter = lastCheck.toISOString();
    }
    const videos = getYouTubeResults(url, params);
    const newResultCount = await updateVideoCache(videos);
    if (newResultCount > 0) {
        console.log('Found ' + newResultCount.toString() + ' new videos and cached them.');
    }
    else {
        console.log('No new videos; returning only cached data.');
    }
    const allVideos = await pool.query('SELECT * FROM synthia_videos');
    res.json(allVideos.rows);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNoQyxPQUFPLEVBQXFCLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUFlLE1BQU0sSUFBSSxDQUFDO0FBVXZDLE1BQU0sRUFBRSxDQUFDO0FBQ1QsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFXLE1BQU0sRUFBRSxDQUFDO0FBRTFDLE1BQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDckwsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7QUFFNUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxpQkFBaUIsQ0FDL0IsR0FBVyxFQUNYLE1BQThCO0lBRTlCLE1BQU0sS0FBSyxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBdUIsQ0FBQyxDQUFDO0lBQzVELEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBb0IsQ0FBQyxDQUFDO0lBQ25ELE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDWixNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxD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