import { config } from 'dotenv';
import { Router } from 'express';
import { Pool } from 'pg';
import { numericQueryParam, sanitizeDbValuesForHTML } from '../util/util.js';
config();
export const APIRouter = Router();
const connectionString = `postgresql://${process.env.SUPABASE_UN}:${process.env.SUPABASE_PW}@${process.env.SUPABASE_DOMAIN}:${process.env.SUPABASE_PORT}/${process.env.SUPABASE_DB}`;
const pool = new Pool({ connectionString });
async function* getYouTubeResults(url, params) {
    const query = new URLSearchParams(params);
    query.set('channelId', process.env.YT_CHANNEL_ID);
    query.set('key', process.env.YT_API_KEY);
    const fullURL = new URL(url);
    while (true) {
        fullURL.search = query.toString();
        const response = await fetch(fullURL);
        const json = (await response.json());
        if (json.items) {
            for (let item of json.items) {
                yield item;
            }
        }
        if (json.nextPageToken) {
            query.set('pageToken', json.nextPageToken);
        }
        else {
            return;
        }
    }
}
const getBestThumbnail = (thumbnails) => {
    const descendingQualityOrder = [
        'maxres',
        'high',
        'default',
        'medium',
        'standard',
    ];
    for (let quality of descendingQualityOrder) {
        if (thumbnails.hasOwnProperty(quality)) {
            return thumbnails[quality];
        }
    }
    return null;
};
const updateVideoCache = async (videos) => {
    let resultingCount = 0;
    for await (let video of videos) {
        ++resultingCount;
        const id = video.id.videoId;
        const title = video.snippet.title;
        const description = video.snippet.description;
        const thumbnail = getBestThumbnail(video.snippet.thumbnails);
        const thumbnailUrl = thumbnail?.url ?? '';
        const etag = video.etag;
        const publishedTime = video.snippet.publishTime;
        await pool.query('INSERT INTO synthia_videos (id, title, description, thumbnail_url, published_at, etag) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (id) DO NOTHING', [id, title, description, thumbnailUrl, publishedTime, etag]);
    }
    await pool.query('UPDATE metadata SET last_video_check=$1 WHERE id=$2', [
        new Date(),
        1,
    ]);
    return resultingCount;
};
APIRouter.get('/getLatestVideos', async (req, res) => {
    const url = 'https://www.googleapis.com/youtube/v3/search';
    const params = {
        part: 'snippet',
        maxResults: '50',
        order: 'date',
        q: 'Synthia',
        type: 'video',
    };
    const lastCheckResult = await pool.query('SELECT * FROM metadata');
    if (lastCheckResult &&
        lastCheckResult.rowCount &&
        lastCheckResult.rowCount > 0) {
        const lastCheck = lastCheckResult.rows[0].last_video_check;
        params.publishedAfter = lastCheck.toISOString();
    }
    const videos = getYouTubeResults(url, params);
    const newResultCount = await updateVideoCache(videos);
    if (newResultCount > 0) {
        console.log('Found ' + newResultCount.toString() + ' new videos and cached them.');
    }
    else {
        console.log('No new videos; returning only cached data.');
    }
    const limit = numericQueryParam(req, 'limit', 0);
    const offset = (numericQueryParam(req, 'page', 1) - 1) * limit;
    const allVideos = await pool.query('SELECT * FROM synthia_videos ORDER BY published_at DESC LIMIT $1 OFFSET $2', [limit > 0 ? limit : null, offset]);
    sanitizeDbValuesForHTML(allVideos);
    res.json(allVideos.rows);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNoQyxPQUFPLEVBQXFCLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUErQixNQUFNLElBQUksQ0FBQztBQVV2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RSxNQUFNLEVBQUUsQ0FBQztBQUNULE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBVyxNQUFNLEVBQUUsQ0FBQztBQUUxQyxNQUFNLGdCQUFnQixHQUFHLGdCQUFnQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JMLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBRTVDLEtBQUssU0FBUyxDQUFDLENBQUMsaUJBQWlCLENBQy9CLEdBQVcsRUFDWCxNQUE4QjtJQUU5QixNQUFNLEtBQUssR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQXVCLENBQUMsQ0FBQztJQUM1RCxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQW9CLENBQUMsQ0FBQztJQUNuRCxNQUFNLE9BQU8sR0FBUSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FB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