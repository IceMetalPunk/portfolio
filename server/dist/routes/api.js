import { config } from 'dotenv';
import { Router } from 'express';
import { Pool } from 'pg';
import { numericQueryParam, sanitizeDbValuesForHTML } from '../util/util.js';
config();
export const APIRouter = Router();
const connectionString = `postgresql://${process.env.SUPABASE_UN}:${process.env.SUPABASE_PW}@${process.env.SUPABASE_DOMAIN}:${process.env.SUPABASE_PORT}/${process.env.SUPABASE_DB}`;
const pool = new Pool({ connectionString });
async function* getYouTubeResults(url, params) {
    const query = new URLSearchParams(params);
    query.set('channelId', process.env.YT_CHANNEL_ID);
    query.set('key', process.env.YT_API_KEY);
    while (true) {
        const response = await fetch(url + '?' + query.toString());
        const json = (await response.json());
        if (json.items) {
            for (let item of json.items) {
                yield item;
            }
        }
        if (json.nextPageToken) {
            query.set('pageToken', json.nextPageToken);
        }
        else {
            return;
        }
    }
}
const getBestThumbnail = (thumbnails) => {
    const descendingQualityOrder = [
        'maxres',
        'high',
        'default',
        'medium',
        'standard',
    ];
    for (let quality of descendingQualityOrder) {
        if (thumbnails.hasOwnProperty(quality)) {
            return thumbnails[quality];
        }
    }
    return null;
};
const updateVideoCache = async (videos) => {
    let resultingCount = 0;
    for await (let video of videos) {
        ++resultingCount;
        const id = video.id.videoId;
        const title = video.snippet.title;
        const description = video.snippet.description;
        const thumbnail = getBestThumbnail(video.snippet.thumbnails);
        const thumbnailUrl = thumbnail?.url ?? '';
        const etag = video.etag;
        const publishedTime = video.snippet.publishTime;
        await pool.query('INSERT INTO synthia_videos (id, title, description, thumbnail_url, published_at, etag) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (id) DO NOTHING', [id, title, description, thumbnailUrl, publishedTime, etag]);
    }
    await pool.query('UPDATE metadata SET last_video_check=$1 WHERE id=$2', [
        new Date(),
        1,
    ]);
    return resultingCount;
};
APIRouter.get('/getLatestVideos', async (req, res) => {
    const url = 'https://www.googleapis.com/youtube/v3/search';
    const params = {
        part: 'snippet',
        maxResults: '50',
        order: 'date',
        q: 'Synthia',
        type: 'video',
    };
    const lastCheckResult = await pool.query('SELECT * FROM metadata');
    if (lastCheckResult &&
        lastCheckResult.rowCount &&
        lastCheckResult.rowCount > 0) {
        const lastCheck = lastCheckResult.rows[0].last_video_check;
        params.publishedAfter = lastCheck.toISOString();
    }
    const videos = getYouTubeResults(url, params);
    const newResultCount = await updateVideoCache(videos);
    if (newResultCount > 0) {
        console.log('Found ' + newResultCount.toString() + ' new videos and cached them.');
    }
    else {
        console.log('No new videos; returning only cached data.');
    }
    const limit = numericQueryParam(req, 'limit', 0);
    const offset = (numericQueryParam(req, 'page', 1) - 1) * limit;
    const allVideos = await pool.query('SELECT * FROM synthia_videos ORDER BY published_at DESC LIMIT $1 OFFSET $2', [limit > 0 ? limit : null, offset]);
    sanitizeDbValuesForHTML(allVideos);
    res.json(allVideos.rows);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNoQyxPQUFPLEVBQXFCLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUErQixNQUFNLElBQUksQ0FBQztBQVV2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RSxNQUFNLEVBQUUsQ0FBQztBQUNULE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBVyxNQUFNLEVBQUUsQ0FBQztBQUUxQyxNQUFNLGdCQUFnQixHQUFHLGdCQUFnQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JMLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBRTVDLEtBQUssU0FBUyxDQUFDLENBQUMsaUJBQWlCLENBQy9CLEdBQVcsRUFDWCxNQUE4QjtJQUU5QixNQUFNLEtBQUssR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQXVCLENBQUMsQ0FBQztJQUM1RCxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQW9CLENBQUMsQ0FBQztJQUNuRCxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ1osTUFBTSxRQUFRLEdBQUcsTUFB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